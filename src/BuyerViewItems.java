
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class BuyerViewItems extends javax.swing.JFrame {

    ArrayList<Item> ItemsList = new ArrayList<>();
    String Email;
    int currentRating;
    
    public BuyerViewItems() {
        initComponents();
        Email = SystemMainClass.currentUser.Email;
        
        //read buyer email and trusted buyer rating
        String a;
        try(BufferedReader reader = new BufferedReader (new FileReader("BuyerAccount.txt")))
        {
            while ((a = reader.readLine()) != null) 
            {
                String[] read = a.split("\t");
                if (read[0].equals(Email)) 
                {
                    Email = read[0];
                    currentRating = Integer.parseInt(read[5]);                    
                }
            }
        } 
            catch (IOException e) 
            {
                System.out.println(e);
            }
        
        //display item from text file on table 
        try
        {
            Scanner readItem = new Scanner(new File("Item.txt"));
            while (readItem.hasNextLine())
            {
                Item item = new Item (readItem.nextLine()); 
                ItemsList.add(item);
                
                String[] showItem = {String.valueOf(item.ItemID), item.ItemTitle, item.ItemDescription, String.valueOf(item.ItemPrice), item.DMethod, item.Seller, item.Buyer};
                
                DefaultTableModel tableModel = (DefaultTableModel) ItemTable.getModel();
                tableModel.addRow(showItem);
            }
        }
        catch (FileNotFoundException e)
        {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        BackButton = new javax.swing.JButton();
        PurchaseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ItemTable.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Title", "Item Description", "Price (RM)", "Method of Delivery", "Seller"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ItemTable);

        BackButton.setFont(new java.awt.Font("Segoe UI Light", 0, 13)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        PurchaseButton.setFont(new java.awt.Font("Segoe UI Light", 0, 13)); // NOI18N
        PurchaseButton.setText("Purchase");
        PurchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jLabel2.setText("Preloved Household Item Trading System");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PurchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PurchaseButton)
                    .addComponent(BackButton))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        new BuyerMenu().setVisible(true);
        this.dispose();      
    }//GEN-LAST:event_BackButtonActionPerformed

    private void PurchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseButtonActionPerformed
        // TODO add your handling code here:
        
        
        String a;
        String WriteText = "";
        double successFee, currentBal;
              
        
        // Item store in arraylist will be removed after purchase
        if (ItemTable.getSelectedRow() != -1)
        {
            int selectItem = ItemTable.getSelectedRow();
            Item item = ItemsList.get(selectItem);
            JOptionPane.showMessageDialog(this, "Purchase item successfully!");
            DefaultTableModel itemTable = (DefaultTableModel) ItemTable.getModel();
            ItemsList.remove(selectItem);
            itemTable.removeRow(selectItem);
            
            FeeCalculation Fee = new FeeCalculation();
            FeeCalculation.SuccessFee = Fee.FeeCalculation(item.ItemPrice);
            successFee = FeeCalculation.SuccessFee;
        
            // Rewrite Item in arraylist
            try(BufferedWriter writer = new BufferedWriter(new FileWriter("Item.txt")))
            {
                for(Item items: ItemsList)
                {
                    writer.write(items.ItemID+ "\t" +items.ItemTitle+ "\t" +items.ItemDescription+ "\t" + items.ItemPrice + "\t" +items.DMethod + "\t" +items.Seller +System.lineSeparator());
                }
            }
            catch(Exception e)
            {
                System.out.println(2);
            }
            //Add trusted buyer rating by 1 after purchase
            try
            {
                int newRating;
                newRating = currentRating +1;
                currentRating = newRating;
                        
                BufferedReader reader = new BufferedReader(new FileReader("BuyerAccount.txt"));
                while ((a = reader.readLine()) != null) 
                {
                    String[] read = a.split("\t");
                    if (read[0].equals(Email)) 
                    {
                        read[5] = String.valueOf(newRating);
                        WriteText += read[0] +"\t"+ read[1] +"\t"+ read[2] +"\t"+ read[3] +"\t"+ read[4] +"\t"+ read[5] +System.lineSeparator();
                    }
                    else 
                    {
                        WriteText += a + System.lineSeparator();
                    }                   
                }                
            }
            catch(IOException e)
            {
                System.out.println(e);
            }
        try(BufferedWriter writer = new BufferedWriter(new FileWriter("BuyerAccount.txt")))
        {
            writer.write(WriteText);
        }
        catch(Exception e)
        {
             
        }
        //Deduct credit from Seller Account when purchased the item
        try 
        {
            WriteText="";
                        
                       
            BufferedReader reader = new BufferedReader(new FileReader("SellerAccount.txt"));
            while ((a = reader.readLine()) != null) 
            {
                String[] read = a.split("\t");
                if (read[0].equals(item.Seller)) 
                {
                    currentBal = Double.parseDouble(read[5]);
                    currentBal = currentBal - successFee;

                    WriteText += read[0] +"\t"+ read[1] +"\t"+ read[2] +"\t"+ read[3] +"\t"+ read[4] +"\t"+ currentBal +System.lineSeparator();
                }
                else 
                {
                    WriteText += a + System.lineSeparator();
                }                   
            } 
        }
        catch(IOException e)
        {
            System.out.println(e);
        }
        try(BufferedWriter writer = new BufferedWriter(new FileWriter("SellerAccount.txt")))
        {
            writer.write(WriteText);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        // Purchase item wil be saved in Transaction text file      
        try
        {           
            File f = new File("Transaction.txt");
            
            try(BufferedWriter writer = new BufferedWriter(new FileWriter(f,true)))
            {
            
            writer.write(item.ItemID+ "\t" +item.ItemTitle+ "\t" +item.ItemDescription+ "\t" + item.ItemPrice + "\t" +item.DMethod + "\t" 
                         +item.Seller+ "\t" + Email + "\t" + successFee + System.lineSeparator());            
            }
            catch(IOException e)
            {
                System.out.println(e);    
            }
            
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        
        }
    }//GEN-LAST:event_PurchaseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuyerViewItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuyerViewItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuyerViewItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuyerViewItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuyerViewItems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JTable ItemTable;
    private javax.swing.JButton PurchaseButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
